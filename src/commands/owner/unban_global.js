module.exports = {
    name: 'unban_global',
    aliases: ['gunban', 'globalunban', 'unbanall'],
    category: 'owner',
    description: 'Remove global ban from a user across all bot instances (Owner Only)',
    usage: 'unban_global @user [reason]',
    cooldown: 10,
    permissions: ['owner'],
    ownerOnly: true,
    args: true,
    minArgs: 1,

    async execute({ sock, message, args, from, sender }) {
        try {
            let targetUser = null;
            let reason = args.slice(1).join(' ') || 'Global unban by owner';
            
            // Get target user from mention or reply
            if (message.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
                targetUser = message.message.extendedTextMessage.contextInfo.participant;
            } else if (message.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0]) {
                targetUser = message.message.extendedTextMessage.contextInfo.mentionedJid[0];
            } else if (args[0].includes('@')) {
                targetUser = args[0].replace('@', '') + '@s.whatsapp.net';
            } else {
                return sock.sendMessage(from, {
                    text: '‚ùå *Invalid User*\n\nPlease mention a user or reply to their message:\n‚Ä¢ `unban_global @user [reason]`\n‚Ä¢ Reply to user message: `unban_global [reason]`\n\n*Example:* unban_global @user Appeal approved by network admin'
                });
            }
            
            const username = targetUser.split('@')[0];
            
            // Show information about global unban process
            await sock.sendMessage(from, {
                text: `üîç *GLOBAL UNBAN INITIATED*\n\nüë§ **Target:** @${username}\nüìù **Reason:** ${reason}\nüëÆ **Initiated by:** Owner (${sender.split('@')[0]})\n‚è∞ **Process started:** ${new Date().toLocaleString()}\n\nüåê **Network Operations:**\n‚Ä¢ Checking global ban status\n‚Ä¢ Verifying ban records\n‚Ä¢ Preparing network synchronization\n‚Ä¢ Calculating impact across instances\n\n‚è≥ *Processing global unban request...*`,
                contextInfo: {
                    mentionedJid: [targetUser]
                }
            });
            
            try {
                // Mock global unbanning system
                const unbanData = await this.globalUnbanUser(targetUser, reason, sender);
                
                if (!unbanData.wasGloballyBanned) {
                    return sock.sendMessage(from, {
                        text: `‚ÑπÔ∏è *User Not Globally Banned*\n\nüë§ **User:** @${username}\n‚úÖ **Status:** Not on global ban list\nüåê **Network access:** Full access\n\n*This user is not globally banned and has access to all bot instances.*`,
                        contextInfo: {
                            mentionedJid: [targetUser]
                        }
                    });
                }
                
                const unbanMessage = `‚úÖ *GLOBAL UNBAN SUCCESSFUL*\n\nüë§ **User:** @${username}\nüåê **Status:** GLOBAL ACCESS RESTORED\nüìÖ **Unbanned on:** ${new Date().toLocaleDateString()}\nüëÆ **Unbanned by:** Owner (${sender.split('@')[0]})\nüìù **Reason:** ${reason}\nüÜî **Global Ban ID:** ${unbanData.globalBanId}\n\nüåç **Network Restoration:**\n‚Ä¢ Affected instances: ${unbanData.affectedInstances}\n‚Ä¢ Synchronization time: ${unbanData.syncTime}ms\n‚Ä¢ Network coverage: 100%\n‚Ä¢ Propagation: Complete\n\nüéâ **Access Fully Restored:**\n‚Ä¢ Access to ALL bot instances ‚úÖ\n‚Ä¢ Cross-network features enabled ‚úÖ\n‚Ä¢ All bot capabilities available ‚úÖ\n‚Ä¢ Network-wide restrictions lifted ‚úÖ\n‚Ä¢ Full user privileges restored ‚úÖ\n\nüìä **Global Ban History:**\n‚Ä¢ Originally banned: ${unbanData.originalBanDate}\n‚Ä¢ Ban duration: ${unbanData.banDuration}\n‚Ä¢ Ban reason: ${unbanData.originalReason}\n‚Ä¢ Network instances affected: ${unbanData.previouslyAffected}\n‚Ä¢ Total active global bans: ${unbanData.totalGlobalBans}\n\nüö® *Global unban synchronized across all bot instances*`;
                
                await sock.sendMessage(from, {
                    text: unbanMessage,
                    contextInfo: {
                        mentionedJid: [targetUser]
                    }
                });
                
                // Notify the unbanned user
                try {
                    await sock.sendMessage(targetUser.replace('s.whatsapp.net', 'c.us'), {
                        text: `üéâ *GLOBAL UNBAN NOTICE*\n\n**Your global ban has been LIFTED from all bot instances**\n\nüìã **Global Unban Details:**\n‚Ä¢ Unbanned by: Bot Owner Network\n‚Ä¢ Reason: ${reason}\n‚Ä¢ Date: ${new Date().toLocaleDateString()}\n‚Ä¢ Global Ban ID: ${unbanData.globalBanId}\n‚Ä¢ Restored instances: ALL\n\nüåç **What This Means:**\n‚Ä¢ You can now use ALL bots in the network\n‚Ä¢ Full access restored immediately\n‚Ä¢ All bot instances will respond to you\n‚Ä¢ Previous restrictions completely removed\n‚Ä¢ Network-wide access granted\n\nüéØ **Getting Started Again:**\n‚Ä¢ Type \`help\` on any bot to see commands\n‚Ä¢ Type \`menu\` to explore features\n‚Ä¢ Type \`ping\` to test bot responses\n‚Ä¢ All premium features available if applicable\n\nüö® **Important Reminder:**\nPlease follow network rules to avoid future global bans\nNetwork policies apply across all instances\n\n*Welcome back to the bot network! Use responsibly.*`
                    });
                } catch (notifyError) {
                    console.log('Could not notify globally unbanned user:', notifyError.message);
                }
                
                // Log the global unban action
                console.log(`[GLOBAL_UNBAN] User ${username} globally unbanned by ${sender} - Reason: ${reason}`);
                
            } catch (unbanError) {
                console.error('Global unban error:', unbanError);
                
                await sock.sendMessage(from, {
                    text: `‚ùå *Global Unban Failed*\n\n**Error:** ${unbanError.message}\n\n**Possible causes:**\n‚Ä¢ Network synchronization failure\n‚Ä¢ Global ban record not found\n‚Ä¢ Cross-instance communication error\n‚Ä¢ Database connection issues\n‚Ä¢ Global unban system malfunction\n\n**Critical Impact:**\nUser may still be banned on some instances\n\n**Actions needed:**\n‚Ä¢ Check network connectivity\n‚Ä¢ Verify global ban database\n‚Ä¢ Manual intervention required\n‚Ä¢ Contact network administrators\n\n*Immediate attention required for network consistency*`
                });
            }
            
        } catch (error) {
            console.error('GlobalUnban command error:', error);
            
            await sock.sendMessage(from, {
                text: `‚ùå *CRITICAL GLOBAL UNBAN SYSTEM ERROR*\n\n**System Error:** ${error.message}\n\nüö® **SECURITY ALERT:** Global unban system failure\n\n**Immediate actions needed:**\n‚Ä¢ Check network connectivity status\n‚Ä¢ Verify global ban database integrity\n‚Ä¢ Review cross-instance communication\n‚Ä¢ Monitor for system corruption\n‚Ä¢ Consider emergency network protocols\n\n‚ö†Ô∏è **Global access management compromised**`
            });
        }
    },
    
    async globalUnbanUser(userId, reason, unbannedBy) {
        // Mock global unban system - would interact with network database
        
        // Simulate checking if user is globally banned
        const wasGloballyBanned = Math.random() < 0.9; // 90% chance user was globally banned
        
        if (!wasGloballyBanned) {
            return { wasGloballyBanned: false };
        }
        
        // Simulate network synchronization delay
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        const globalBanId = 'GBAN_' + (Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000) + '_' + Math.random().toString(36).substr(2, 8).toUpperCase();
        const banDate = new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000);
        const banDuration = Math.floor((Date.now() - banDate) / (24 * 60 * 60 * 1000));
        
        return {
            wasGloballyBanned: true,
            globalBanId: globalBanId,
            userId: userId,
            reason: reason,
            unbannedBy: unbannedBy,
            unbannedAt: new Date(),
            originalBanDate: banDate.toLocaleDateString(),
            banDuration: `${banDuration} days`,
            originalReason: 'Network policy violation',
            affectedInstances: Math.floor(Math.random() * 100) + 50,
            previouslyAffected: Math.floor(Math.random() * 120) + 60,
            syncTime: Math.floor(Math.random() * 4000) + 2000,
            totalGlobalBans: Math.floor(Math.random() * 15) + 3
        };
    }
};