export default {
    name: 'restart',
    aliases: ['reboot', 'reload'],
    category: 'owner',
    description: 'Restart the bot process (Owner Only)',
    usage: 'restart [reason]',
    cooldown: 0,
    permissions: ['owner'],
    ownerOnly: true,

    async execute({ sock, message, args, from, sender, prefix }) {
        try {
            const reason = args.join(' ') || 'Manual restart by owner';
            const uptime = process.uptime();
            
            // Calculate uptime
            const days = Math.floor(uptime / 86400);
            const hours = Math.floor((uptime % 86400) / 3600);
            const minutes = Math.floor((uptime % 3600) / 60);
            const uptimeString = `${days}d ${hours}h ${minutes}m`;
            
            await sock.sendMessage(from, {
                text: `üîÑ *Bot Restart Initiated*\n\nüë§ **Initiated by:** Owner (${sender.split('@')[0]})\nüìù **Reason:** ${reason}\n‚è∞ **Current uptime:** ${uptimeString}\nüîÑ **Status:** Preparing restart...\n\n‚ö†Ô∏è **Warning:** Bot will be offline temporarily\n‚è≥ **Expected downtime:** 10-30 seconds\n\nü§ñ *Restarting bot process now...*`
            });
            
            // Log restart event
            console.log(`[RESTART] Bot restart initiated by ${sender} - Reason: ${reason}`);
            
            // Give time for message to send
            setTimeout(() => {
                console.log('[RESTART] Restarting bot process...');
                
                // Attempt graceful restart
                if (process.env.PM2_HOME) {
                    // If using PM2
                    require('child_process').exec('pm2 restart 0', (error) => {
                        if (error) {
                            console.error('[RESTART] PM2 restart failed:', error);
                            process.exit(1);
                        }
                    });
                } else {
                    // Standard Node.js restart
                    process.exit(0);
                }
            }, 2000);
            
        } catch (error) {
            console.error('Restart command error:', error);
            
            await sock.sendMessage(from, {
                text: `‚ùå *Restart Failed*\n\n**Error:** ${error.message}\n\n**Possible causes:**\n‚Ä¢ Process manager not available\n‚Ä¢ Insufficient permissions\n‚Ä¢ System resource constraints\n‚Ä¢ Critical system error\n\n**Manual alternatives:**\n‚Ä¢ Use system process manager\n‚Ä¢ Restart hosting service\n‚Ä¢ Check system logs\n‚Ä¢ Contact system administrator\n\n‚ö†Ô∏è *Bot may need manual intervention*`
            });
        }
    }
};